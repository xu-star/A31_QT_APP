#ifndef SER_COM_PORT_TX_H
#define SER_COM_PORT_TX_H
#include <GlobalVarible.h>
#include <QSocketNotifier>
#include <linux/fs.h>
#include<fcntl.h>
#include<errno.h>
#include<termio.h>
#include<sys/ioctl.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<stdlib.h>
#include<unistd.h>
#include <stdio.h>
#include<QTimer>
#include<QMutex>
#include<QWidget>
#include "cali.h"

//#define FALSE 0
//#define TRUE 1
#define MAX_RESPONSE_LENGTH 1024
#define PORT_FAILURE -11
#define TO_B110	3200000	/* These values are the timeout delays */
#define TO_B300 1600000	/* at the end of packets of data.      */
#define TO_B600  800000 /* At this stage a true calculation    */
#define TO_B1200 400000	/* has not been worked out. So these   */
#define TO_B2400 200000	/* values are just a guess.            */
#define TO_B4800 100000	/*                                     */
//#define TO_B9600  20000	/* The spec says that a message frame  */
#define TO_B9600  50000	/* The spec says that a message frame  */
#define TO_B19200 25000	/* starts after a silent interval of   */
#define TO_B38400 12500 /* at least 3.5 character times.       */
#define TO_B57600  8333 /* These are uS times.                */
#define TO_B115200 4167 
const uchar   Init_Left[3]=
    {0x1B,0x61,0x00};
const uchar   Init_Middle[3]=
    {0x1B,0x61,0x01};
const uchar   Init_Printer3[7]=                                  //
   {0x1B,0x40,0x1C,0x26,0x1B,0x57,0x03};		
const uchar   Init_Printer2[10]=                                  //
   {0x1B,0x40,0x1C,0x26,0x1B,0x38,0x06,0x1B,0x57,0x02};		
const uchar   Init_Printer[10]=                                  //
   {0x1B,0x40,0x1C,0x26,0x1B,0x38,0x01,0x1B,0x57,0x01};												 //
   const uchar Init_Label[4]=
   	{0x1f,0x55,0x37,0x01};
   const uchar Init_ThermalPaper[7]=
   	{0x1f,0x55,0x37,0x00,0x1B,0x6D,0x05};
   const uchar Init_Potency[3]=
   	{0x1B,0x6D,0x04};
const uchar Init_Table[]=
	{0x1b,0x44,0x01,0x60,0x60,0x58,0x00};//

	

/*const uchar   Code128[]=                                       //
   {0x1D,0x48,0x02,0x1d,0x68,0x20,0x1d,0x77,0x01,0x1d,0x6b,0x49,0x08};	   

const uchar   Code39_1[]=                                       //
   {0x1D,0x48,0x02,0x1d,0x68,0x20,0x1d,0x77,0x01,0x1d,0x6b,0x45,0x08};*/		

const uchar   Code39[]=                                       //
   {0x1D,0x48,0x02,0x1d,0x68,0x20,0x1d,0x77,0x01,0x1d,0x6b,0x45};		

const uchar   Code93[]=                                       //
   {0x1D,0x48,0x02,0x1d,0x68,0x20,0x1d,0x77,0x01,0x1d,0x6b,0x48};	

const uchar   Code128[]=                                       //
   {0x1D,0x48,0x02,0x1d,0x68,0x20,0x1d,0x77,0x01,0x1d,0x6b,0x49};	


const uchar  Init_Hzfont[]=                                   //
   {0x1B,0x38,00,0xFF};												 //

const uchar Init_Qr[]=
	{0x1D,0x28,0x31,0x13,0x00,0x00,0x00};		 							 //
const uchar Init_Qr1[]=
       {0x1D,0x28,0x31};		 							 //
       
const char Yaohua[]=
	{"www.yaohua.com.cn"};		 							 //
 
const uchar Enter_key[] = {0x0A,0X0D};

const uchar Enter_key1[] = {0x1d,0X0c};

const uchar   Init_PrinterLP180[4]=                                  //
   {0x1B,0x40,0x1C,0x26};		

const uchar Init_LabelLP180[]=
{0x1B,0x1D,0x1E,0x04,0x31,0x02,0xA0,0x1B,0x1D,0x1F};

const uchar Init_WidthLP180[4]=
{0x1D,0x57,0x40,0x01};

const uchar Init_PositionLP180[4]=
{0x1D,0x4C,0xF8,0x00};

const uchar Init_GapLP180[]=
{0x1B,0x1D,0x1E,0x04,0x32,0x00,0xCC,0x1B,0x1D,0x1F};

const unsigned char auchCRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
} ;



const unsigned char auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
} ;


 typedef struct				//
   {
    uint	MBAdr;					//
    uchar	MBTp;					//
							    //		0-
							    //		1-u3
							    //		2-s32
							    //		3-u16
							    //		4-S16
							    //		5-u8
							    //		
    uchar	MBXz;				    //
    void*	MBPtr;				    //
    float	MBMax;					//
    float	MBMin;					//
    }MBVarStruct;


class PrintPort:public QObject
{
    Q_OBJECT

public:
    explicit PrintPort(QWidget *parent = 0);
private:
    int m_fd;//print
    int m_fd1;
	int m_fd2;//232(2)
	int m_fd3;//485
    termios new_serialArry;
	 termios new_serialArry1;
	termios new_serialArry2;
	termios new_serialArry3;//4
   // QSocketNotifier *m_notifier;
    QByteArray  *rev_buf;
    QByteArray  *send_buf;
    QMutex mutex_r;
	 QMutex mutex_r2;
	  QMutex mutex_r3;
    uchar Sidx;
    uchar Ridx;
	uchar Sidx1;
	uchar Ridx1;
	uchar Sidx2;
	uchar Ridx2;
	uchar Sidx3;
	uchar Ridx3;
   
    uchar SendBuff[100];
	uchar SendBuff1[30];
    uchar RecvBuff1[100];
	uchar RecvBuff2[47];
	uchar SendBuff2[47];
	uchar SendBuff3[253];
	uchar RecvBuff3[100];
	QSocketNotifier *m_notifier;
	QSocketNotifier *m_notifier1;


public :  

    cali calia;
    //open
    bool openPort(QString portName,uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);//print

     bool openPort1(QString portName,uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);//232(1)

    bool openPort2(QString portName,uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);//232(2)

    bool openPort3(QString portName,uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);//485

    bool openPort_Rd(QString portName,uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);//232(1)


    void Uart1Recv();
	
    void  printwrite();

   void printwrite2();

   void printwriteLP180();
   
   void PrintDailyReport();

   void PrintMonthReport();

   void PrintAllReport();

   void PrintProductReport();

   void PrintProductSeniorReport();

   void PrintUserReport();

   void PrintUserSeniorReport();

   void PrintSqlSheet();

    //read
    //QByteArray read();

   void Print_initial2(void);

   void Print_initial(void);

   void Print_initialLP180(void);

   void PrintFloat(float ft);

   void PrintAcc();

   void PrintAccLP180();

   void PrintCompany();

   void PrintBusiness();

   void PrintBusiness1();

   void Print_16to10LP180(unsigned char n);
   
   void Print_16to10(unsigned char n);

   void Print_Int(unsigned int n);         

   void Print_Send0(unsigned char ch,uchar n) ;  

   void Print_Send0LP180(unsigned char ch,uchar n) ;

   void Print_StringLP180(const char str[],uchar n);

   void Print_String(const char str[],uchar n);

   void Print_String3(QString str,uchar n);

 uchar QstringLength(QString str);

  void Print_String1(QString str); 

   void Print_String1LP180(QString str); 

   void Print_String2(float ft);

   void Price2UartData(float ft);

   void uart1_init(uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);
   
   void uart2_init(uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);

   void uart3_init(uchar baundRate,uchar dataBits,uchar parity,
              uchar stopBits, uchar flow ,int time_out);

   bool uart3_close();

   void LoadUart1Com(void);
   
   void LoadRdCom(void);//zw 0919
   
   void LoadUart2Com(void);
	  //QByteArray  write();
   void LoadUart3Com(void);
    //read
    //QByteArray read();

   unsigned char loadZMComuData(unsigned char * pucBuff);

   uchar loadA7ComuData(uchar * pucBuff);

    void jzStateCheck(unsigned char * pucBuff, unsigned char ucData);

    void hex2UartData(float slHex, unsigned char * puBuff, unsigned char ucNumb, unsigned char ucPara);

    unsigned char UartModBus(unsigned int ucRNumb,unsigned char* pucRBuff,unsigned char* pucTBuff);

      //unsigned char UartModBus1(unsigned int ucRNumb,unsigned char* pucRBuff,unsigned char* pucTBuff);


    unsigned int CRC16(unsigned char *puchMsg, unsigned int usDataLen);

    unsigned char MBfycm(unsigned char gnm,unsigned char ycm,unsigned char *TxBuffer);

    uchar MBsrlsl(uint chr1,uint chr2,uchar *TxBuffer);

    uchar MBxdgxq1(uint chr1,uint chr2,uchar *TxBuffer);

    unsigned char MBdujcq(unsigned char ml,unsigned int chr1,unsigned int chr2,unsigned char *TxBuffer);

   unsigned char MBxdgjcq(unsigned int chr1,unsigned int chr2,uchar *TxBuffer);

   uchar MBxdojcq(uint chr1,uint chr2,void *ptr,uchar *TxBuffer);

   uchar MBduwj(uint ch1,uint ch2,uchar *ptr,uchar *TxBuffer);		//

   uchar MBLoadRec(uint ch1,uchar *ptr);				//
  
    int receive_response(  unsigned char *received_string, int ttyfd, uchar baundRate);

    uchar MBjcjcq(uint chr);

    float fToHexf(float ft);

    float Hextof(float ft);

    float HexUtof(long ft);

    void SaveData(void);
	
     
   // void hex2UartData(float slHex, unsigned char * puBuff, unsigned char ucNumb, unsigned char ucPara);

 // int receive_response(  unsigned char *received_string, int ttyfd );


    //void pingTimerSlot1();    
		
signals:
    void hasdata();
    void hasCodeData();

private slots:
    void remoteDateInComing1();
    void remoteDateInComing();
    void RdReturnData();





};
#endif // SER_COM_PORT_TX_H
